{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Korn Analysis\"\n",
        "format: html\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "```\n",
        "#import lyricsgenius\n",
        "#import pandas as pd\n",
        "#import re\n",
        "\n",
        "GENIUS_ACCESS_TOKEN = \"j0a5S76HQ2OmujVXG19QFXzV_eg4leYIMvuJq4NqUKHWRiOhDHZiGx4ggcU_5its\"\n",
        "\n",
        "genius = lyricsgenius.Genius(GENIUS_ACCESS_TOKEN)\n",
        "genius.remove_section_headers = True  \n",
        "genius.skip_non_songs = True  \n",
        "\n",
        "artist = genius.search_artist(\"Korn\", sort=\"popularity\")\n",
        "\n",
        "def clean_lyrics(lyrics):\n",
        "    if lyrics:\n",
        "        lyrics = lyrics.replace(\"\\n\", \" \")  \n",
        "        lyrics = re.sub(r\"\\[.*?\\]\", \"\", lyrics)  \n",
        "        lyrics = re.sub(r\"[\\(\\[].*?[\\)\\]]\", \"\", lyrics) \n",
        "        lyrics = re.sub(r\"^\\s+|\\s+$\", \"\", lyrics)  \n",
        "    return lyrics\n",
        "\n",
        "song_data = [{\"title\": song.title, \"lyrics\": clean_lyrics(song.lyrics)} for song in artist.songs]\n",
        "\n",
        "df = pd.DataFrame(song_data)\n",
        "\n",
        "csv_filename = \"korn_clean_lyrics.csv\"\n",
        "df.to_csv(csv_filename, index=False, encoding='utf-8')\n",
        "\n",
        "print(f\"Clean lyrics saved to {csv_filename}\")\n",
        "\n",
        "\n",
        "```\n",
        "\n",
        "```\n",
        "import pandas as pd\n",
        "import re\n",
        "\n",
        "file_path = \"korn_clean_lyrics.csv\" \n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "def clean_lyrics(lyrics):\n",
        "    if pd.isna(lyrics): \n",
        "        return \"\"\n",
        "    lyrics = re.sub(r\"^\\d+\\s*\", \"\", lyrics) \n",
        "    lyrics = re.sub(r\"\\bcontributor[s]?\\b\", \"\", lyrics, flags=re.IGNORECASE)  \n",
        "    lyrics = re.sub(r\"\\[.*?\\]\", \"\", lyrics)  \n",
        "    lyrics = re.sub(r\"\\s+\", \" \", lyrics).strip()  \n",
        "    return lyrics\n",
        "\n",
        "df[\"lyrics\"] = df[\"lyrics\"].apply(clean_lyrics)\n",
        "\n",
        "cleaned_file_path = \"korn_clean_lyrics_updated.csv\"\n",
        "df.to_csv(cleaned_file_path, index=False, encoding=\"utf-8\")\n",
        "\n",
        "print(f\"Cleaned lyrics saved to {cleaned_file_path}\")\n",
        "\n",
        "```\n",
        "\n",
        "```\n",
        "import pandas as pd\n",
        "\n",
        "file_path = \"korn_clean_lyrics_updated.csv\"  \n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "def filter_songs(title):\n",
        "    if pd.isna(title):  \n",
        "        return False\n",
        "    title = title.lower()\n",
        "    return not (\"live\" in title or \"remix\" in title or \"mix\" in title\n",
        "            or \"demo\" in title or \"clean\" in title or \"cover\" in title\n",
        "            or \"radio\" in title or \"edit\" in title or \"acoustic\" in title or \"show\" in title or \"mass\" in title or \"version\" in title or \"dub\" in title or \"acapella\" in title or \"woodstock\" in title)\n",
        "\n",
        "\n",
        "df_filtered = df[df[\"title\"].apply(filter_songs)].reset_index(drop=True)\n",
        "\n",
        "filtered_file_path = \"korn_clean_lyrics_filtered.csv\"\n",
        "df_filtered.to_csv(filtered_file_path, index=False, encoding=\"utf-8\")\n",
        "\n",
        "print(f\"Filtered lyrics saved to {filtered_file_path}\")\n",
        "\n",
        "```\n",
        "\n",
        "```\n",
        "import pandas as pd\n",
        "import re\n",
        "\n",
        "file_path = \"korn_clean_lyrics_filtered.csv\"  \n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "def clean_lyrics_text(lyrics):\n",
        "    if pd.isna(lyrics):  \n",
        "        return \"\"\n",
        "    return re.sub(r\"Contributors.*?Lyrics\", \"\", lyrics, flags=re.IGNORECASE).strip()\n",
        "\n",
        "df[\"lyrics\"] = df[\"lyrics\"].apply(clean_lyrics_text)\n",
        "\n",
        "final_cleaned_file_path = \"korn_final_clean_lyrics.csv\"\n",
        "df.to_csv(final_cleaned_file_path, index=False, encoding=\"utf-8\")\n",
        "\n",
        "print(f\"Final cleaned lyrics saved to {final_cleaned_file_path}\")\n",
        "\n",
        "```\n",
        "\n",
        "```\n",
        "import pandas as pd\n",
        "import re\n",
        "\n",
        "file_path = \"korn_final_clean_lyrics.csv\"  \n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "def remove_promotional_text(lyrics):\n",
        "    if pd.isna(lyrics):  \n",
        "        return \"\"\n",
        "    lyrics = re.sub(r\"See Korn Live.*?Embed\", \"\", lyrics, flags=re.IGNORECASE).strip()  \n",
        "    return lyrics\n",
        "\n",
        "df[\"lyrics\"] = df[\"lyrics\"].apply(remove_promotional_text)\n",
        "\n",
        "final_cleaned_file_path = \"korn_final_clean_lyrics_no_ads.csv\"\n",
        "df.to_csv(final_cleaned_file_path, index=False, encoding=\"utf-8-sig\")\n",
        "\n",
        "print(f\"Final cleaned lyrics saved to {final_cleaned_file_path}\")\n",
        "\n",
        "```\n"
      ],
      "id": "e524b270"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import re\n",
        "from collections import Counter\n",
        "from wordcloud import WordCloud\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.decomposition import LatentDirichletAllocation\n",
        "\n",
        "\n",
        "df = pd.read_csv(\"C:/Users/pauly/OneDrive/Documents/GitHub/Notre-Dame-Projects/Korn LDA Model/korn_final_clean_lyrics_no_ads.csv\")\n",
        "\n",
        "def preprocess_lyrics(lyrics):\n",
        "    if pd.isna(lyrics):  \n",
        "        return \"\"\n",
        "    lyrics = re.sub(r\"[^\\w\\s]\", \"\", lyrics.lower())  \n",
        "    return lyrics\n",
        "\n",
        "df[\"processed_lyrics\"] = df[\"lyrics\"].apply(preprocess_lyrics)\n",
        "\n",
        "all_lyrics = \" \".join(df[\"processed_lyrics\"])\n",
        "\n",
        "word_counts = Counter(all_lyrics.split())\n",
        "\n",
        "most_common_words = word_counts.most_common(20)\n",
        "print(\"\\nMost Common Words in Korn Lyrics:\")\n",
        "for word, freq in most_common_words:\n",
        "    print(f\"{word}: {freq}\")\n",
        "\n",
        "wordcloud = WordCloud(width=800, height=400, background_color=\"black\").generate(all_lyrics)\n",
        "\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.imshow(wordcloud, interpolation=\"bilinear\")\n",
        "plt.axis(\"off\")\n",
        "plt.title(\"Word Cloud of Korn Lyrics\")\n",
        "plt.show()\n",
        "\n",
        "vectorizer = CountVectorizer(stop_words=\"english\", max_features=500)\n",
        "X = vectorizer.fit_transform(df[\"processed_lyrics\"])\n",
        "\n",
        "num_topics = 5\n",
        "lda_model = LatentDirichletAllocation(n_components=num_topics, random_state=42)\n",
        "lda_model.fit(X)\n",
        "\n",
        "words = vectorizer.get_feature_names_out()\n",
        "topics = {}\n",
        "\n",
        "print(\"\\nLDA Topics in Korn Lyrics:\")\n",
        "for topic_idx, topic in enumerate(lda_model.components_):\n",
        "    top_words = [words[i] for i in topic.argsort()[-10:]]  \n",
        "    topics[f\"Topic {topic_idx+1}\"] = top_words\n",
        "    print(f\"Topic {topic_idx+1}: {', '.join(top_words)}\")\n",
        "\n",
        "topics_df = pd.DataFrame(topics)\n",
        "print(\"\\nLDA Topics DataFrame:\\n\", topics_df)"
      ],
      "id": "2d293940",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from textblob import TextBlob\n",
        "\n",
        "df.columns = df.columns.str.strip()\n",
        "\n",
        "if 'album' in df.columns:\n",
        "    def get_sentiment(text):\n",
        "        return TextBlob(str(text)).sentiment.polarity\n",
        "\n",
        "    df[\"sentiment_score\"] = df[\"lyrics\"].apply(get_sentiment)\n",
        "\n",
        "    sentiment_by_album = df.groupby(\"album\")[\"sentiment_score\"].mean().reset_index()\n",
        "\n",
        "    plt.figure(figsize=(12, 6))\n",
        "    sns.barplot(x=\"sentiment_score\", y=\"album\", data=sentiment_by_album, palette=\"coolwarm\")\n",
        "    plt.xlabel(\"Average Sentiment Score\")\n",
        "    plt.ylabel(\"Album\")\n",
        "    plt.title(\"Sentiment Analysis of Korn Albums\")\n",
        "    plt.axvline(0, color=\"black\", linestyle=\"dashed\")  \n",
        "\n",
        "else:\n",
        "    print(\"The dataset does not contain an 'album' column. Sentiment analysis by album requires album information.\")"
      ],
      "id": "069510a0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "sentiment_by_album_sorted = sentiment_by_album.sort_values(by=\"sentiment_score\", ascending=False)\n",
        "\n",
        "plt.figure(figsize=(12, 6))\n",
        "sns.barplot(x=\"sentiment_score\", y=\"album\", data=sentiment_by_album_sorted, palette=\"coolwarm\")\n",
        "plt.xlabel(\"Average Sentiment Score\")\n",
        "plt.ylabel(\"Album\")\n",
        "plt.title(\"Sentiment Analysis of Korn Albums (Sorted)\")\n",
        "plt.axvline(0, color=\"black\", linestyle=\"dashed\")\n",
        "plt.show()"
      ],
      "id": "b64f62c8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "album_order = [\n",
        "    \"Korn\", \"Life is Peachy\", \"Follow The Leader\", \"Issues\", \"Untouchables\",\n",
        "    \"Take a Look in the Mirror\", \"See You On The Other Side\", \"Untitled\",\n",
        "    \"Remember Who You Are\", \"The Path of Totality\", \"The Paradigm shift\",\n",
        "    \"The Serenity of Suffering\", \"The Nothing\", \"Requiem\"\n",
        "]\n",
        "\n",
        "sentiment_by_album[\"album\"] = pd.Categorical(sentiment_by_album[\"album\"], categories=album_order, ordered=True)\n",
        "sentiment_by_album_sorted = sentiment_by_album.sort_values(\"album\")\n",
        "\n",
        "plt.figure(figsize=(12, 6))\n",
        "sns.lineplot(x=sentiment_by_album_sorted[\"album\"], y=sentiment_by_album_sorted[\"sentiment_score\"], marker=\"o\")\n",
        "plt.xticks(rotation=45, ha=\"right\")\n",
        "plt.xlabel(\"Album\")\n",
        "plt.ylabel(\"Average Sentiment Score\")\n",
        "plt.title(\"Sentiment Trend Across Korn Albums\")\n",
        "plt.axhline(0, color=\"black\", linestyle=\"dashed\") \n",
        "plt.show()"
      ],
      "id": "3ed08411",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pronouncing\n",
        "def count_rhymes(lyrics):\n",
        "    words = lyrics.split()\n",
        "    rhymes = [pronouncing.rhymes(word) for word in words]\n",
        "    return sum([len(r) for r in rhymes])\n",
        "\n",
        "df[\"rhyme_count\"] = df[\"lyrics\"].apply(count_rhymes)\n",
        "\n",
        "rhyme_by_album = df.groupby(\"album\")[\"rhyme_count\"].mean().reset_index()\n",
        "\n",
        "rhyme_by_album = rhyme_by_album.sort_values(by=\"rhyme_count\", ascending=False)\n",
        "\n",
        "plt.figure(figsize=(12, 6))\n",
        "sns.barplot(x=\"rhyme_count\", y=\"album\", data=rhyme_by_album, palette=\"magma\")\n",
        "plt.xlabel(\"Average Rhyme Count per Song\")\n",
        "plt.ylabel(\"Album\")\n",
        "plt.title(\"Rhyme Density Across Korn Albums\")\n",
        "plt.show()"
      ],
      "id": "f7a574e1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "word_to_track = \".....\"  # Change to any word you want to track\n",
        "\n",
        "df[\"word_count\"] = df[\"lyrics\"].apply(lambda x: x.lower().split().count(word_to_track))\n",
        "word_trend = df.groupby(\"album\")[\"word_count\"].sum().reset_index()\n",
        "\n",
        "plt.figure(figsize=(12, 6))\n",
        "sns.lineplot(x=\"album\", y=\"word_count\", data=word_trend, marker=\"o\")\n",
        "plt.xticks(rotation=45)\n",
        "plt.xlabel(\"Album\")\n",
        "plt.ylabel(f\"Occurrences of '{word_to_track}'\")\n",
        "plt.title(f\"Frequency of '{word_to_track}' Across Korn Albums\")\n",
        "plt.show()"
      ],
      "id": "394662b4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "from textblob import TextBlob\n",
        "\n",
        "df.columns = df.columns.str.strip()\n",
        "\n",
        "if \"sentiment_score\" not in df.columns:\n",
        "    df[\"sentiment_score\"] = df[\"lyrics\"].apply(lambda x: TextBlob(str(x)).sentiment.polarity)\n",
        "\n",
        "top_positive = df.nlargest(10, \"sentiment_score\")[[\"title\", \"sentiment_score\"]]\n",
        "top_negative = df.nsmallest(10, \"sentiment_score\")[[\"title\", \"sentiment_score\"]]\n",
        "\n",
        "print(top_positive)\n",
        "print(top_negative)"
      ],
      "id": "b2b6463f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "```\n",
        "import lyricsgenius\n",
        "import pandas as pd\n",
        "import re\n",
        "\n",
        "GENIUS_ACCESS_TOKEN = \"j0a5S76HQ2OmujVXG19QFXzV_eg4leYIMvuJq4NqUKHWRiOhDHZiGx4ggcU_5its\"\n",
        "genius = lyricsgenius.Genius(GENIUS_ACCESS_TOKEN)\n",
        "\n",
        "def get_lyrics(artist_name, max_songs=20):\n",
        "    artist = genius.search_artist(artist_name, max_songs=max_songs, sort=\"popularity\")\n",
        "    song_data = [{\"title\": song.title, \"lyrics\": song.lyrics} for song in artist.songs]\n",
        "    return pd.DataFrame(song_data)\n",
        "\n",
        "bands = [\"Korn\", \"Slipknot\", \"Linkin Park\", \"Limp Bizkit\", \"Deftones\"]\n",
        "band_lyrics = {}\n",
        "\n",
        "for band in bands:\n",
        "    band_lyrics[band] = get_lyrics(band, max_songs=30)\n",
        "\n",
        "for band, df in band_lyrics.items():\n",
        "    df.to_csv(f\"{band}_lyrics.csv\", index=False)\n",
        "\n",
        "```\n"
      ],
      "id": "60066614"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import re\n",
        "\n",
        "def clean_lyrics(lyrics):\n",
        "    if pd.isna(lyrics):  \n",
        "        return \"\"\n",
        "    lyrics = lyrics.replace(\"\\n\", \" \")  \n",
        "    lyrics = re.sub(r\"\\[.*?\\]\", \"\", lyrics)  \n",
        "    lyrics = re.sub(r\"[\\(\\[].*?[\\)\\]]\", \"\", lyrics)  \n",
        "    lyrics = re.sub(r\"^\\s+|\\s+$\", \"\", lyrics)  \n",
        "    return lyrics\n",
        "\n",
        "bands = [\"Korn\", \"Slipknot\", \"Linkin Park\", \"Limp Bizkit\", \"Deftones\"]\n",
        "band_dfs = {}\n",
        "\n",
        "for band in bands:\n",
        "    file_path = f\"{band}_lyrics.csv\" \n",
        "    df = pd.read_csv(file_path)\n",
        "    df[\"lyrics\"] = df[\"lyrics\"].apply(clean_lyrics)\n",
        "    band_dfs[band] = df"
      ],
      "id": "c2aed266",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from textblob import TextBlob\n",
        "\n",
        "def get_sentiment(text):\n",
        "    return TextBlob(str(text)).sentiment.polarity\n",
        "\n",
        "sentiment_scores = {}\n",
        "\n",
        "for band, df in band_dfs.items():\n",
        "    df[\"sentiment_score\"] = df[\"lyrics\"].apply(get_sentiment)\n",
        "    sentiment_scores[band] = df[\"sentiment_score\"].mean()  \n",
        "\n",
        "sentiment_df = pd.DataFrame(sentiment_scores.items(), columns=[\"Band\", \"Sentiment Score\"])"
      ],
      "id": "ad80e8ab",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "plt.figure(figsize=(10, 5))\n",
        "sns.barplot(x=\"Band\", y=\"Sentiment Score\", data=sentiment_df, palette=\"coolwarm\")\n",
        "plt.xlabel(\"Band\")\n",
        "plt.ylabel(\"Average Sentiment Score\")\n",
        "plt.title(\"Comparison of Lyric Sentiment Across Nu-Metal Bands\")\n",
        "plt.axhline(0, color=\"black\", linestyle=\"dashed\")  \n",
        "plt.show()"
      ],
      "id": "b17e2af8",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\pauly\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}